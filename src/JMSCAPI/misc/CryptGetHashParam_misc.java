package JMSCAPI.misc;

public interface CryptGetHashParam_misc {
	
	/**
	 * Possible queries:
	 * <ul>
	 * <li>{@linkplain #HP_ALGID}</li>
	 * <li>{@linkplain #HP_HASHSIZE}</li>
	 * <li>{@linkplain #HP_HASHVAL}</li>	
	 * </ul>
	 * NOTE:  CSPs can add more values that this function can query.
	 */
	public static String dwParam = "dwParam";

	/**
	 * An ALG_ID that indicates the algorithm specified when the hash object was created.
	 */
	public static final int HP_ALGID  = 0x0001;  // Hash algorithm
	
	/**
	 * The hash value or message hash for the hash object specified by <code>hHash</code>. This
	 * value is generated based on the data supplied to the hash object earlier through the 			{@link JMSCAPI.Advapi32#CryptHashData
	 * CryptHashData} and <b>CryptHashSessionKey</b> functions.
	 * 																									<p>
	 * The <b>CryptGetHashParam</b> function completes the hash. After <b>CryptGetHashParam</b>
	 * has been called, no more data can be added to the hash. Additional calls to
	 * <b>CryptHashData</b> or <b>CryptHashSessionKey</b> fail. After the application is done
	 * with the hash, {@link JMSCAPI.Advapi32#CryptDestroyHash CryptDestroyHash} should be
	 * called to destroy the hash object.
	 */
	public static final int HP_HASHVAL =  0x0002;  // Hash value
	
	/**
	 * DWORD value indicating the number of bytes in the hash value. This value will vary
	 * depending on the hash algorithm. Applications must retrieve this value just before
	 * the <code>HP_HASHVAL</code> value so the correct amount of memory can be allocated.
	 */
	public static final int HP_HASHSIZE  =  0x0004;  // Hash value size	
	
	/**
	 * The error codes prefaced by NTE are generated by the particular CSP being used.
	 * Some possible error codes returned by <b>GetLastError()</b>:
	 *																										</p><table><tr>
	 *<td>ERROR_INVALID_HANDLE</td>			<td>One of the parameters specifies a handle that is
	 *											not valid.													</td></tr><tr>
	 *
	 *<td>ERROR_INVALID_PARAMETER = 87</td>	<td>One of the parameters contains a value that is not
	 * 										valid. This is most often a pointer that is not valid.			</td></tr><tr>
	 * 
	 *<td>ERROR_MORE_DATA</td>				<td>If the buffer specified by the <code>pbData</code>
	 * 										parameter is not large enough to hold the returned data,
	 * 										the function sets the <b>ERROR_MORE_DATA</b> code and
	 * 										stores the required buffer size, in bytes, in the variable
	 * 										pointed to by <code>pdwDataLen</code>.							</td></tr><tr>
	 * 
	 *<td>NTE_BAD_FLAGS</td>				<td>The <code>dwFlags</code> parameter is nonzero.				</td></tr><tr>
	 *
	 *<td>NTE_BAD_HASH</td>					<td>The hash object specified by the <code>hHash</code>
	 *											parameter is not valid.												</td></tr><tr>
	 *
	 *<td>NTE_BAD_TYPE</td>					<td>The <code>dwParam </code>parameter specifies an unknown
	 *											value number.												</td></tr><tr>
	 *
	 *<td>NTE_BAD_UID</td>					<td>The CSP context that was specified when the key was
	 *											created cannot be found.									</td></tr></table>
		 */
		public static String error_codes = "error codes";
}
