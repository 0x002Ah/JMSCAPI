package JMSCAPI.misc;

public interface CryptGenKey_misc extends KeyFlags{
	/**
	 * Possible dwFlags:<ul>
	 * <li>{@link KeyFlags#CRYPT_ARCHIVABLE CRYPT_ARCHIVABLE}</li>
	 * 
	 * <li>{@link KeyFlags#CRYPT_CREATE_SALT CRYPT_CREATE_SALT}</li>

	 * <li>{@link KeyFlags#CRYPT_EXPORTABLE CRYPT_EXPORTABLE}</li>

	 * <li>{@link KeyFlags#CRYPT_NO_SALT CRYPT_NO_SALT}</li>
	 * <li>{@link KeyFlags#CRYPT_PREGEN CRYPT_PREGEN}</li>
	 * <li>{@link KeyFlags#CRYPT_USER_PROTECTED CRYPT_USER_PROTECTED}</li>
	 * <li>{@link KeyFlags#CRYPT_FORCE_KEY_PROTECTION_HIGH CRYPT_FORCE_KEY_PROTECTION_HIGH}</li>
	 * 
	 * </ul>
	 */
	public static String dwFlags = "dwFlags";
	
	/**
	 * 					In addition to generating session keys for symmetric algorithms, this
	 * 					function can also generate public/private key pairs. Each CryptoAPI client
	 * 					generally possesses two public/private key pairs. To generate one of these
	 * 					key pairs, set the Algid parameter to one of the following values.
	 * 					<code>AT_KEYEXCHANGE</code> for Key exchange, or <code>AT_SIGNATURE</code>
	 * 					for Digital signature.
	 * 																									<p>
	 * 					NOTE:  When key specifications <code>AT_KEYEXCHANGE</code> and
	 * 					<code>AT_SIGNATURE</code> are specified, the algorithm identifiers that are
	 * 					used to generate the key depend on the provider used. As a result, for these
	 * 					key specifications, the values returned from <b>CryptGetKeyParam</b> 
	 * 					(when the <code>KP_ALGID</code> parameter is specified) depend on the
	 * 					provider used. To determine which algorithm identifier is used by the
	 * 					different providers for the key specs AT_KEYEXCHANGE and AT_SIGNATURE, see 		<a href="http://msdn.microsoft.com/en-us/library/aa375549(v=vs.85).aspx">
	 * 					ALG_ID</a>.
	 */
	public static String AlgidInfo = "AlgidInfo";
	
	/**
	 * 					The sizes of a session key, RSA signature key, and RSA key exchange keys can
	 * 					be set when the key is generated. 
	 * 					Thus, if a 2,048-bit RSA signature key is to be generated, the 
	 * 					value 0x08000000 is combined with any other <code>dwFlags</code> predefined
	 * 					value with a bitwise-OR operation. The upper 16 bits of 0x08000000 is 0x0800,
	 * 					or decimal 2,048. 
	 * 																									<p>
	 * 					Due to changing export control restrictions, the default CSP and default key
	 * 					length may change between operating system versions. It is important that
	 * 					both the encryption and decryption use the same CSP and that the key length
	 * 					be explicitly set using the <code>dwFlags</code> parameter to ensure
	 * 					interoperability on different operating system platforms.
	 * 																									<p>
	 * 					In particular, the default RSA Full Cryptographic Service Provider is the
	 * 					Microsoft RSA Strong Cryptographic Provider. The default DSS Signature
	 * 					Diffie-Hellman Cryptographic Service Provider is the Microsoft Enhanced DSS
	 * 					Diffie-Hellman Cryptographic Provider. Each of these CSPs has a default
	 * 					128-bit symmetric key length for RC2 and RC4 and a 1,024-bit default key
	 * 					length for public key algorithms.

	 */
	public static String KeySizesInfo = "KeySizesInfo";
	
	/**
 * The error codes prefaced by NTE are generated by the particular CSP being used.
 * Some possible error codes returned by <b>GetLastError()</b>:
 *																										</p><table><tr>
 *<td>ERROR_INVALID_HANDLE</td>			<td>One of the parameters specifies a handle that is
 *											not valid.													</td></tr><tr>
 *
 *<td>ERROR_INVALID_PARAMETER = 87</td>	<td>One of the parameters contains a value that is not
 * 										valid. This is most often a pointer that is not valid.			</td></tr><tr>
 * 
 *<td>NTE_BAD_ALGID</td>				<td>The <code>Algid</code> parameter specifies an algorithm
 *											that this CSP does not support.								</td></tr><tr>
 *
 *<td>NTE_BAD_FLAGS</td>				<td>The <code>dwFlags</code> parameter contains a value
 *											that is not valid.											</td></tr><tr>
 *
 *<td>NTE_BAD_UID</td>					<td>The <code>hProv</code> parameter does not contain
 *											a valid context handle.										</td></tr><tr>
 *
 *<td>NTE_FAIL</td>						<td>The function failed in some unexpected way.					</td></tr><tr>
 *
 *<td>NTE_SILENT_CONTEXT</td>			<td>The provider could not perform the action because
 *											the context was acquired as silent.							</td></tr>
 *																										</table>
	 */
	public static String error_codes = "error codes";

}
