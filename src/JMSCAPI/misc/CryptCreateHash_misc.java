package JMSCAPI.misc;

public interface CryptCreateHash_misc {
	/**
	 * The error codes prefaced by NTE are generated by the particular CSP being used.
	 * Some possible error codes returned by <b>GetLastError()</b>:
	 *																										</p><table><tr>
	 *<td>ERROR_INVALID_HANDLE</td>			<td>One of the parameters specifies a handle that is
	 *											not valid.													</td></tr><tr>
	 *
	 *<td>ERROR_INVALID_PARAMETER = 87</td>	<td>One of the parameters contains a value that is not
	 * 										valid. This is most often a pointer that is not valid.			</td></tr><tr>
	 * 
	 *<td>ERROR_NOT_ENOUGH_MEMORY</td>		<td>The operating system ran out of memory during
	 * 											the operation.												</td></tr><tr>
	 * 
	 *<td>NTE_BAD_ALGID</td>				<td>The <code>Algid</code> parameter specifies an algorithm
	 *											that this CSP does not support.								</td></tr><tr>
	 *<td>NTE_BAD_FLAGS</td>				<td>The <code>dwFlags</code> parameter is nonzero.				</td></tr><tr>  
	 * 
	 *<td>NTE_BAD_KEY</td>					<td>A keyed hash algorithm, such as <b>CALG_MAC</b>, is
	 *											specified by <code>Algid</code>, and the <code>hKey</code> 
	 *											parameter is either zero or it specifies a key handle
	 *											that is not valid. This error code is also returned
	 *											if the key is to a stream cipher or if the cipher
	 *											mode is anything other than CBC.							</td></tr><tr>
	 *
	 *<td>NTE_NO_MEMORY</td>				<td>The CSP ran out of memory during the operation.				</td></tr><tr>
	 *
	 *<td>NTE_BAD_UID</td>					<td>The CSP context that was specified when the hash was
	 *											created cannot be found.									</td></tr>
	 *																										</table>

	*/
		public static String error_codes = "error codes";
		
	/**
	 * TODO correct links
	 */
		
	/**
	 * <b>Remarks</b>																					<p>
	 * 
	 * For a list of Microsoft service providers and the algorithms they implement, see 				<a href="http://msdn.microsoft.com/en-us/library/aa386983(v=vs.85).aspx">
	 * Microsoft Cryptographic Service Providers</a>.
	 * 																									<p>
	 * The computation of the actual hash is done with the <b>CryptHashData</b> and 
	 * <b>CryptHashSessionKey</b> functions. These require a handle to the hash object.
	 * After all the data has been added to the hash object, any of the following operations
	 * can be performed:																				<ul>
	 * <li>The hash value can be retrieved by using <b>CryptGetHashParam</b>.</li>
	 * <li>A session key can be derived by using <b>CryptDeriveKey</b>.</li>
	 * <li>The hash can be signed by using <b>CryptSignHash</b>.</li>
	 * <li>A signature can be verified by using <b>CryptVerifySignature</b>.</li>
	 * </ul>
	 * After one of the functions from this list has been called, <b>CryptHashData</b> and 
	 * <b>CryptHashSessionKey</b> cannot be called.
	 */
		public static String remarks = "remarks";
}
