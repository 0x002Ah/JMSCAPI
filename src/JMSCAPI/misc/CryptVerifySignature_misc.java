package JMSCAPI.misc;

public interface CryptVerifySignature_misc {
	
	/**
	 * Possible dwFlags:<ul>
	 * <li>{@link SignatureFlags#CRYPT_NOHASHOID CRYPT_NOHASHOID}</li>
	 * <li>{@link SignatureFlags#CRYPT_TYPE2_FORMAT CRYPT_TYPE2_FORMAT}</li>
	 * <li>{@link SignatureFlags#CRYPT_X931_FORMAT CRYPT_X931_FORMAT}</li>
	 * </ul>
	 */
	public static String dwFlags = "dwFlags";
	
	/**
	 * 	
	 * The error codes prefaced by NTE are generated by the particular CSP being used.
	 * Some possible error codes returned by <b>GetLastError()</b>:
	 *																										</p><table><tr>
	 *<td>ERROR_INVALID_HANDLE</td>			<td>One of the parameters specifies a handle that is
	 *											not valid.													</td></tr><tr>
	 *
	 *<td>ERROR_INVALID_PARAMETER = 87</td>	<td>One of the parameters contains a value that is not
	 * 										valid. This is most often a pointer that is not valid.			</td></tr><tr>
	 * 
	 *<td>NTE_BAD_FLAGS</td>				<td>The <code>dwFlags</code> parameter is nonzero.
	 *											?! perhaps error in MSDN description						</td></tr><tr>
	 *
	 *<td>NTE_BAD_HASH</td>					<td>The hash object specified by the <code>hHash</code>
	 *											parameter is not valid.										</td></tr><tr>
	 * 
	 *<td>NTE_BAD_KEY</td>					<td>The <code>hPubKey</code> parameter does not contain
	 *											a handle to a valid public key.								</td></tr><tr>
	 *
	 *<td>NTE_BAD_SIGNATURE</td>			<td>The signature was not valid. This might be because
	 *											the data itself has changed, the description string
	 *											did not match, or the wrong public key was specified
	 *											by <code>hPubKey</code>.
	 *																										<p>
	 *											This error can also be returned if the hashing or
	 *											signature algorithms do not match the ones used to
	 *											create the signature.										</td></tr><tr>	 *
	 *
	 *<td>NTE_BAD_UID</td>					<td>The CSP context that was specified when the hash object
	 *											was created cannot be found.</td></tr><tr>
	 *
	 *<td>NTE_NO_MEMORY</td>				<td>The CSP ran out of memory during the operation.				</td></tr>
	 *																										</table>
		 */
	public static String error_codes = "error codes";
	
	
	/**
	 * Remarks
	 * <p>
	 * The <b>CryptVerifySignature</b> function completes the hash. After this call, no more data can
	 * be added to the hash. Additional calls to <code>CryptHashData</code> or <code>CryptHashSessionKey</code> 
	 * fail. After the application is done with the hash, <code>CryptDestroyHash</code> should be
	 * called to destroy the hash object.
	 * 																										<p>
	 * If you generate a signature by using the .NET Framework APIs and try to verify it by using the
	 * <b>CryptVerifySignature</b> function, the function will fail and GetLastError will return
	 * <code>NTE_BAD_SIGNATURE</code>. This is due to the different byte orders between the native
	 * Win32 API and the .NET Framework API.
	 * 																										<p>
	 * The native cryptography API uses little-endian byte order while the .NET Framework API uses
	 * big-endian byte order. If you are verifying a signature generated by using a .NET Framework API,
	 * you must swap the order of signature bytes before calling the <b>CryptVerifySignature</b>
	 * function to verify the signature.
	 */
	public static String remarks = "remarks";
	

}
