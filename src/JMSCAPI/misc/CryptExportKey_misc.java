package JMSCAPI.misc;

public interface CryptExportKey_misc {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	/**
	 * Possible dwBlobType:<ul>
	 * <li>{@link #OPAQUEKEYBLOB}</li>
	 * <li>{@link #PLAINTEXTKEYBLOB}</li>
	 * <li>{@link #PRIVATEKEYBLOB}</li>
	 * <li>{@link #PUBLICKEYBLOB}</li>
	 * <li>{@link #SIMPLEBLOB}</li>
	 * <li>{@link #SYMMETRICWRAPKEYBLOB}</li>
	 * 

	 * </ul>
	 */
	public static String dwBlobType = "dwBlobType";
	

	/**
	 * Used to transport session keys.
	 */
	public static final int SIMPLEBLOB  =            0x1;
	
	/**
	 * Used to transport public keys.
	 */
	public static final int PUBLICKEYBLOB =          0x6;
	
	/**
	 * Used to transport public/private key pairs.
	 */
	public static final int PRIVATEKEYBLOB =         0x7;
	
	/**
	 * Used to export any key supported by the CSP in use. The key is exported in plaintext using the
	 * following format.
	 * <pre><code>
	 * 	BLOBHEADER hdr;
	 *	DWORD cbKeySize;
	 *	BYTE rgbKeyData [];
	 * </code></pre>
	 */
	public static final int PLAINTEXTKEYBLOB =       0x8;
	
	/**
	 * Used to store session keys in an Schannel CSP or any other vendor-specific format. OPAQUEKEYBLOBs
	 * are nontransferable and must be used within the CSP that generated the BLOB.
	 */
	public static final int OPAQUEKEYBLOB =          0x9;
	
	//public static final int PUBLICKEYBLOBEX =        0xA;
	
	/**
	 * Used to export and import a symmetric key wrapped with another symmetric key. The actual wrapped key
	 * is in the format specified in the <a href="http://go.microsoft.com/fwlink/?linkid=84565">IETF RFC 3217</a>
	 * standard.
	 */
	public static final int SYMMETRICWRAPKEYBLOB =   0xB;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	/**
	 * Possible dwFlags:<ul>
	 * <li>{@link #CRYPT_BLOB_VER3}</li>
	 * <li>{@link #CRYPT_DESTROYKEY}</li>
	 * <li>{@link KeyFlags#CRYPT_OAEP CRYPT_OAEP}</li>
	 * <li>{@link #CRYPT_SSL2_FALLBACK}</li>
	 * <li>{@link #CRYPT_Y_ONLY}</li>
	 * </ul>
	 */
	public static String dwFlags = "dwFlags";
	
	/**
	 * This flag causes this function to export version 3 of a BLOB type.
	 */
	public static final int CRYPT_BLOB_VER3 =   0x00000080;
	
	/**
	 * This flag destroys the original key in the OPAQUEKEYBLOB. This flag is available in Schannel CSPs only.
	 */
	public static final int CRYPT_DESTROYKEY =   0x00000004;
	

	
	/**
	 * The first eight bytes of the RSA encryption block padding must be set to 0x03 rather than to random data.
	 * This prevents version rollback attacks and is discussed in the SSL3 specification. This flag is available
	 * for Schannel CSPs only.
	 */
	public static final int CRYPT_SSL2_FALLBACK =   0x00000002;
	
	/**
	 * This flag is not used.
	 */
	public static final int CRYPT_Y_ONLY =   0x00000001;
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * 	
	 * The error codes prefaced by NTE are generated by the particular CSP being used.
	 * Some possible error codes returned by <b>GetLastError()</b>:
	 *																										</p><table><tr>
	 *<td>ERROR_INVALID_HANDLE</td>			<td>One of the parameters specifies a handle that is
	 *											not valid.													</td></tr><tr>
	 *
	 *<td>ERROR_INVALID_PARAMETER = 87</td>	<td>One of the parameters contains a value that is not
	 * 										valid. This is most often a pointer that is not valid.			</td></tr><tr>
	 * 
	 *<td>ERROR_MORE_DATA</td>				<td>If the buffer specified by the <code>pbData</code>
	 *											parameter is not large enough to hold the returned
	 *											data, the function sets the ERROR_MORE_DATA code and
	 *											stores the required buffer size, in bytes, in the
	 *											variable pointed to by <code>pdwDataLen</code>.				</td></tr><tr>
	 *
	 *<td>NTE_BAD_DATA</td>					<td>Either the algorithm that works with the public key
	 *											to be exported is not supported by this CSP, or an
	 *											attempt was made to export a session key that was
	 *											encrypted with something other than one of your
	 *											public keys.												</td></tr><tr>
	 *
	 *<td>NTE_BAD_FLAGS</td>				<td>The <code>dwFlags</code> parameter is nonzero.
	 *											?!! Must be wrong description on MSDN						</td></tr><tr>

	 *<td>NTE_BAD_KEY</td>					<td>One or both of the keys specified by <code>hKey</code>
	 *											and <code>hExpKey</code> are not valid.						</td></tr><tr>
	 *
	 *<td>NTE_BAD_KEY_STATE</td>			<td>You do not have permission to export the key. That is,
	 *											when the <code>hKey</code> key was created, the
	 *											<b>CRYPT_EXPORTABLE</b> flag was not specified.				</td></tr><tr>
	 *
	 *<td>NTE_BAD_PUBLIC_KEY</td>			<td>The key BLOB type specified by <code>dwBlobType</code>
	 *											is <b>PUBLICKEYBLOB</b>, but <code>hExpKey</code> does
	 *											not contain a public key handle.							</td></tr><tr>
	 *
	 *<td>NTE_BAD_TYPE</td>					<td>The <code>dwBlobType</code> parameter specifies an
	 *											unknown BLOB type.											</td></tr><tr>
	 *
	 *<td>NTE_BAD_UID</td>					<td>The CSP context that was specified when the <code>hKey</code>
	 *											key was created cannot be found.							</td></tr><tr>
	 *
	 *<td>NTE_NO_KEY</td>					<td>A session key is being exported, and the <code>hExpKey</code>
	 *											parameter does not specify a public key.					</td></tr>
	 *																										</table>
		 */
	public static String error_codes = "error codes";

}
